package com.isfootball.jdbc.rep.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import com.nurkiewicz.jdbcrepository.RowUnmapper;
import com.isfootball.jdbc.Match;
import java.sql.Timestamp;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class MatchesDB
{

	private static String TABLE_NAME = "matches";

	private static String TABLE_ALIAS = "matches";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		ID("id"),
		MATCH_DATE("match_date"),
		MATCH_DAY("match_day"),
		TEAM1("team1"),
		TEAM2("team2"),
		CLOSED("closed"),
		COMMENTS("comments"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public MatchesDB ()
	{

	}

	public static final RowMapper<Match> ROW_MAPPER = new MatchesRowMapper ();
	public static final class  MatchesRowMapper implements RowMapper<Match>
	{
		public Match mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			Match obj = new Match();
			obj.setId(rs.getLong(COLUMNS.ID.getColumnName()));
			obj.setMatchDate(rs.getTimestamp(COLUMNS.MATCH_DATE.getColumnName()));
			obj.setMatchDay(rs.getTimestamp(COLUMNS.MATCH_DAY.getColumnName()));
			obj.setTeam1(rs.getString(COLUMNS.TEAM1.getColumnName()));
			obj.setTeam2(rs.getString(COLUMNS.TEAM2.getColumnName()));
			obj.setClosed(rs.getBoolean(COLUMNS.CLOSED.getColumnName()));
			obj.setComments(rs.getString(COLUMNS.COMMENTS.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<Match> ROW_UNMAPPER = new MatchesRowUnmapper ();
	public static final class MatchesRowUnmapper implements RowUnmapper<Match>
	{
		public Map<String, Object> mapColumns(Match matches)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			//mapping.put(COLUMNS.ID.getColumnName(), matches.getId());
			if (matches.getMatchDate() != null)
				mapping.put(COLUMNS.MATCH_DATE.getColumnName(), new Timestamp (matches.getMatchDate().getTime()));
			if (matches.getMatchDay() != null)
				mapping.put(COLUMNS.MATCH_DAY.getColumnName(), new Timestamp (matches.getMatchDay().getTime()));
			mapping.put(COLUMNS.TEAM1.getColumnName(), matches.getTeam1());
			mapping.put(COLUMNS.TEAM2.getColumnName(), matches.getTeam2());
			mapping.put(COLUMNS.COMMENTS.getColumnName(), matches.getComments());
			mapping.put(COLUMNS.CLOSED.getColumnName(), matches.getClosed());
			return mapping;
		}
	}

	public static final RowMapper<Match> ALIAS_ROW_MAPPER = new MatchesAliasRowMapper ();
	public static final class  MatchesAliasRowMapper implements RowMapper<Match>
	{
		public Match mapRow(ResultSet rs, int rowNum) throws SQLException
		{
			Match obj = new Match();
			obj.setId(rs.getLong(COLUMNS.ID.getColumnAliasName()));
			obj.setMatchDate(rs.getTimestamp(COLUMNS.MATCH_DATE.getColumnAliasName()));
			obj.setMatchDay(rs.getTimestamp(COLUMNS.MATCH_DAY.getColumnAliasName()));
			obj.setTeam1(rs.getString(COLUMNS.TEAM1.getColumnAliasName()));
			obj.setTeam2(rs.getString(COLUMNS.TEAM2.getColumnAliasName()));
			obj.setComments(rs.getString(COLUMNS.COMMENTS.getColumnAliasName()));
			obj.setClosed(rs.getBoolean(COLUMNS.CLOSED.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values ().length;
		for (COLUMNS c : COLUMNS.values ())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}